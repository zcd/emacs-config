#+TITLE: emacs-config
#+AUTHOR: zcd
#+PROPERTY: header-args :results silent

* Base Settings

** General

This config file.

#+begin_src emacs-lisp
  (defvar me/emacs-config-file (expand-file-name "emacs-config.org"
                                                 user-emacs-directory))

  (defun me/emacs-config ()
    "Open my emacs config"
    (interactive)
    (find-file me/emacs-config-file))

  (defun me/emacs-config-load ()
    "org-babel reload of the main startup config"
    (interactive)
    (org-babel-load-file me/emacs-config-file))
#+end_src

** Cleanliness

Other config files (and their outputs) should live in a quieter place.

#+begin_src emacs-lisp
  (use-package no-littering
    :ensure t)
#+end_src

Initial screen.

#+begin_src emacs-lisp
  (setq-default inhibit-startup-screen t
                initial-scratch-message "")
#+end_src

=garbage-collect= on focus-out, Emacs /should/ feel snappier.

#+begin_src emacs-lisp
  (add-hook 'focus-out-hook #'garbage-collect)
#+end_src

=midnight-mode= settings for automatic buffer cleanup

#+begin_src emacs-lisp
  (use-package midnight
    :config
    (dolist (buffer-re '("\\*helpful.*\\*"
                         "magit.*"))
      (add-to-list 'clean-buffer-list-kill-regexps buffer-re))
    (midnight-mode +1))
#+end_src

** Interface

Pretty icons

#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))
  
  (use-package all-the-icons-dired
    :ensure t
    :after (all-the-icons dired))
#+end_src

*** Treemacs

It's nice to have treemacs available when I want it.

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind ("C-x t t" . treemacs))

  (use-package treemacs-projectile
    :ensure t
    :after (treemacs projectile))

  (use-package treemacs-icons-dired
    :after (dired)
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)
#+end_src

*** Mode line

[[https://www.emacswiki.org/emacs/DelightedModes][Delight]] customizes the per-mode text on the mode line.

#+begin_src emacs-lisp
  (use-package delight
    :ensure t)
#+end_src

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] for pretty mode-line. Be sure to first run =M-x
all-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :custom
    (doom-modeline-buffer-file-name-style 'auto)
    (doom-modeline-height 20)
    (doom-modeline-major-mode-color-icon t)
    :config
    (doom-modeline-mode +1))
#+end_src

*** Visuals

Modern support for line numbers.

#+begin_src emacs-lisp
  (global-display-line-numbers-mode)
#+end_src
   
#+begin_src emacs-lisp
  (when window-system
    (blink-cursor-mode 0)
    (scroll-bar-mode 0)
    (tool-bar-mode 0)
    (setq-default frame-title-format "%b (%f)"))
  (menu-bar-mode 0)
#+end_src

*** Fonts

The system-agnostic check for font existence is lifted from [[https://emacsredux.com/blog/2021/12/22/check-if-a-font-is-available-with-emacs-lisp/][this blog
post]].

#+begin_src emacs-lisp
  (cl-defstruct font-settings
    family
    size-default
    size-header-line
    size-mode-line
    size-smalltext
    size-title)

  (defvar me/font-config
    (cond ((find-font (font-spec :name "Monaco"))
           (make-font-settings :family "Monaco"
                               :size-default 120
                               :size-header-line 120
                               :size-mode-line 110
                               :size-smalltext 90
                               :size-title 140))
          ((find-font (font-spec :name "DejaVu Sans Mono"))
           (make-font-settings :family "DejaVu Sans Mono"
                               :size-default 140
                               :size-header-line 140
                               :size-mode-line 120
                               :size-smalltext 110
                               :size-title 160))))

  (defun me/set-frame-font (frame)
    (with-selected-frame frame
      (when window-system
        (set-face-attribute 'default frame
                            :font (font-settings-family me/font-config)
                            :height (font-settings-size-default me/font-config))
        (set-face-attribute 'fixed-pitch frame
                            :font (font-settings-family me/font-config))
        (set-face-attribute 'font-lock-comment-face frame
                            :italic t)
        (set-face-attribute 'font-lock-doc-face frame
                            :italic t))))

  (add-hook 'after-make-frame-functions
            #'me/set-frame-font)
#+end_src

*** Theming

- During the day, use [[https://github.com/john2x/plan9-theme.el][plan9]].
- When it gets dark, use [[https://github.com/bbatsov/zenburn-emacs][zenburn]].

#+begin_src emacs-lisp
  (use-package zenburn-theme
    :ensure t)

  (use-package plan9-theme
    :ensure t)

  (use-package circadian
    :ensure t
    :custom
    (circadian-themes '(("8:00" . plan9)
                        ("19:30" . zenburn)))
    :config
    (circadian-setup))
#+end_src

Alternatively these commands will quick clear-and-enable the day/night
themes.

#+begin_src emacs-lisp :tangle no
  (circadian-enable-theme 'plan9)
  (circadian-enable-theme 'zenburn)
#+end_src

=ibuffer=

#+begin_src emacs-lisp
  (use-package ibuffer
    :bind ("C-x C-b" . ibuffer)
    :config
    (add-hook 'ibuffer-hook #'ibuffer-do-sort-by-major-mode))

  (use-package ibuffer-vc
    :ensure t
    :after (ibuffer)
    :config
    (add-hook 'ibuffer-hook #'ibuffer-vc-set-filter-groups-by-vc-root))
#+end_src

=zoom-mode= to auto-resize buffers. These are the following configured
options:

+ 100 columns and 61.8% of the frame height if frame height is greater
  than macbook 13" resolution
  + 1600 pixel
  + 62 chars
+ half split otherwise

Meanwhile only size if there are at least 20 lines in the buffer.

#+begin_src emacs-lisp
  (defun me/zoom--size-callback ()
    (cond ((> (frame-pixel-height) (if (display-graphic-p) 1600 62))
           '(100 . 0.618))
          (t
           '(0.5 . 0.5))))

  (defun me/zoom--ignore-pred ()
    (< (count-lines (point-min)
                    (point-max))
       20))

  (use-package zoom
    :ensure t
    :bind ("M-+" . zoom)
    :custom
    (zoom-mode +1)
    (zoom-size #'me/zoom--size-callback)
    (zoom-ignore-predicates '(me/zoom--ignore-pred)))
#+end_src

Prefer vertical splits in general. This still needs some work with
horizontal splitting on large monitors as it behaves funny with the
=zoom-mode= settings.

#+begin_src emacs-lisp
  (defun me/split-window-sensibly (&optional window)
    "replacement `split-window-sensibly' function which prefers vertical splits"
    (interactive)
    (let ((window (or window (selected-window))))
      (or (and (window-splittable-p window t)
               (with-selected-window window
                 (split-window-right)))
          (and (window-splittable-p window)
               (with-selected-window window
                 (split-window-below))))))

  (setq-default split-height-threshold 120)
  (setq-default split-width-threshold 160)
  (setq-default split-window-preferred-function #'me/split-window-sensibly)
#+end_src

Uncategorized obvious stuff

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Help bindings

=helpful= for a richer version of =describe-=

#+begin_src emacs-lisp
  (use-package helpful
    :ensure t
    :bind (("C-c C-d" . helpful-at-point)
           ("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key)
           ("C-h o" . helpful-symbol)
           ("C-h F" . helpful-function)
           ("C-h C" . helpful-command)))
#+end_src
   
=which-key= to suggest keybind followups.

#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :delight
    :config
    (which-key-mode +1))
#+end_src

** Navigation

Turn on =recentf-fmode= (recent file mode) to quickly find recently
edited files.

#+begin_src emacs-lisp
  (use-package recentf
    :config
    (dolist (exclude-dir `(,no-littering-var-directory
                           ,no-littering-etc-directory))
      (add-to-list 'recentf-exclude exclude-dir))
    (recentf-mode +1)
    :custom
    (recentf-max-menu-items 40)
    (recentf-save-file (expand-file-name ".recentf"
                                         no-littering-var-directory)))
#+end_src

[[https://www.emacswiki.org/emacs/Projectile][Projectile]] for guessing project boundaries. =git= repos are
auto-recognized, but this can be manually enabled via touching a
=.projectile= file.

For the mode-line, just show the project name.

#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init (projectile-mode +1)
    :delight '(:eval (concat " " (projectile-project-name)))
    :bind-keymap ("C-c p" . projectile-command-map)
    :custom
    (compilation-buffer-name-function #'projectile-compilation-buffer-name)
    (compilation-save-buffers-predicate #'projectile-current-project-buffer-p))
#+end_src

- [[https://github.com/abo-abo/ace-window][ace-window]] for window navigation
- =transpose-frame=
- [[https://www.emacswiki.org/emacs/buffer-move.el][buffer-move]]

#+begin_src emacs-lisp
  (use-package ace-window
    :ensure t
    :bind (("M-o" . ace-window))
    :custom (aw-keys '(?a ?s ?d ?f ?j ?k ?l ?\;)))

  (use-package buffer-move
    :ensure t)

  (use-package transpose-frame
    :ensure t)
#+end_src

Tone down on the vertical scroll.

#+begin_src emacs-lisp
  (setq-default auto-window-vscroll nil)
#+end_src

** Completion frameworks

[[https://github.com/abo-abo/swiper][Ivy]] along with swiper for search and counsel for augmented
functionality.

#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :delight
    :bind (("C-c r" . 'ivy-resume)
           ("C-x B" . 'ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :config
    (ivy-mode +1))

  (use-package counsel
    :ensure t
    :after ivy
    :bind (("M-x" . counsel-M-x)))

  (use-package swiper
    :ensure t
    :after ivy
    :bind (("C-s" . swiper)))

  (use-package avy
    :ensure t
    :bind ("M-j" . avy-goto-char-timer))
#+end_src

=ivy-prescient= for smarter history-based suggestions

#+begin_src emacs-lisp
  (use-package ivy-prescient
    :ensure t
    :after ivy
    :config
    (ivy-prescient-mode +1))
#+end_src

#+begin_src emacs-lisp
  (use-package deft
    :ensure t
    :after org
    :bind ("C-c o f" . deft)
    :custom
    (deft-directory me/org-home-dir)
    (deft-extensions '("org"))
    (deft-recursive t))
#+end_src

** Editing

End sentences from a single period, so that =M-e= behaves appropriately
in my writing.

#+begin_src emacs-lisp
  (setq sentence-end-double-space nil)
#+end_src

Highlight matching parens and current line.

#+begin_src emacs-lisp
  (show-paren-mode +1)
  (global-hl-line-mode +1)
#+end_src

Kill ring/clipboard settings.

#+begin_src emacs-lisp
  (setq-default select-enable-clipboard t
                select-enable-primary t
                save-interprogram-paste-before-kill t
                mouse-yank-at-point t)

  (defun me/kill-ring--clear ()
    (interactive)
    (setq kill-ring '()))

  (use-package browse-kill-ring
    :ensure t
    :bind ("C-c y" . browse-kill-ring))
#+end_src

Indentation stuff (No tabs).

#+begin_src emacs-lisp
  (defun me/die-tabs ()
    "Replace all tabs with 2 spaces in current buffer"
    (interactive)
    (set-variable 'tab-width 2)
    (mark-whole-buffer)
    (untabify (region-beginning) (region-end))
    (keyboard-quit))
  (setq-default indent-tabs-mode nil)
  (setq electric-indent-mode nil)
#+end_src

Commenting lines out.

#+begin_src emacs-lisp
  (defun me/toggle-comment-on-line ()
    "comment or uncomment current line"
    (interactive)
    (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)
#+end_src

Jump back in a file where last located.

#+begin_src emacs-lisp
  (use-package saveplace
    :ensure nil
    :config
    (save-place-mode +1)
    :custom
    (save-place-file (expand-file-name "places"
                                       no-littering-var-directory)))
#+end_src

Backups, lockfiles, and autosave.

#+begin_src emacs-lisp
  (use-package files
    :ensure nil
    :custom
    (backup-directory-alist
     `(("." . ,(expand-file-name "backups/"
                                 no-littering-var-directory))))
    (auto-save-default nil)
    (create-lockfiles nil))
#+end_src

Uncategorized obvious stuff.

#+begin_src emacs-lisp
  (set-default-coding-systems 'utf-8)
#+end_src

Define helper to refresh all open file buffers from disk (stolen from
[[https://emacs.stackexchange.com/questions/24459/revert-all-open-buffers-and-ignore-errors][StackExchange]]).

#+begin_src emacs-lisp
  (defun me/revert-all-fbuffers ()
    "Refresh all open file buffers without confirmation.
  Buffers in modified (not yet saved) state in emacs will not be reverted. They
  will be reverted though if they were modified outside emacs.
  Buffers visiting files which do not exist any more or are no longer readable
  will be killed."
    (interactive)
    (dolist (buf (buffer-list))
      (let ((filename (buffer-file-name buf)))
        ;; Revert only buffers containing files, which are not modified;
        ;; do not try to revert non-file buffers like *Messages*.
        (when (and filename
                 (not (buffer-modified-p buf)))
          (if (file-readable-p filename)
              ;; If the file exists and is readable, revert the buffer.
              (with-current-buffer buf
                (revert-buffer :ignore-auto :noconfirm :preserve-modes))
            ;; Otherwise, kill the buffer.
            (let (kill-buffer-query-functions) ; No query done when killing buffer
              (kill-buffer buf)
              (message "Killed non-existing/unreadable file buffer: %s" filename))))))
    (message "Finished reverting buffers containing unmodified files."))
#+end_src

* =org-mode= settings

#+begin_src emacs-lisp
  (defvar me/org-home-dir "~/org")
#+end_src

- Default notes destination.
- =org-capture= in any emacs buffer with =C-c o c=
- jump to default capture destination with =C-c o o=
- Hide /italics/, *bolds*, and =code= markers.

#+begin_src emacs-lisp
  (use-package org
    :ensure t
    :bind (("C-c o l" . org-store-link)
           ("C-c o a" . org-agenda)
           ("C-c o c" . org-capture)
           ("C-c o b" . org-switchb)
           ("C-c o o" . (lambda ()
                          (interactive)
                          (find-file org-default-notes-file))))
    :custom
    (org-default-notes-file (file-truename (expand-file-name "inbox.org"
                                                             me/org-home-dir)))
    (org-agenda-files (list org-default-notes-file))
    (org-agenda-todo-ignore-scheduled 'future)
    (org-hide-emphasis-markers t)
    (org-refile-targets '((org-agenda-files :maxlevel . 3))))


  (use-package org-id
    :ensure nil
    :custom
    (org-id-locations-file (expand-file-name ".org-id-locations"
                                             no-littering-var-directory)))
#+end_src

=org-pomodoro= integration with =org-clock-in= is a nifty feature for time
management.

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :custom
    (org-pomodoro-clock-break t))
#+end_src

Exporting as HTML.

#+begin_src emacs-lisp
  (use-package htmlize
    :ensure t)
#+end_src

View $\LaTeX$.

#+begin_src emacs-lisp
  (use-package pdf-tools
    :ensure t)
#+end_src

Some =org=-related utilities.

#+begin_src emacs-lisp
  (defun me/org-babel-load-missing-lang (language)
    "Add the given language symbol only if it hasn't been included."
    (unless (assq language
                  org-babel-load-languages)
      (org-babel-do-load-languages
       'org-babel-load-languages
       (cons (cons language t)
             org-babel-load-languages))))
  
  (me/org-babel-load-missing-lang 'shell)
#+end_src

With =org-mode= v9.2, template expansion is now done via
=org-insert-structure-template=.

#+begin_src emacs-lisp
  (org-defkey org-mode-map
              (kbd "C-c C-,") 'org-insert-structure-template)
#+end_src

** Capture templates

#+begin_src emacs-lisp
  (setq org-capture-templates
        `(("t" "Todo" entry (file+headline
                             org-default-notes-file "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("r" "Reading" entry (file+headline
                                org-default-notes-file "Article bank")
           "* TODO Article: %?\n  %U")
          ("j" "Journal" entry (file+datetree
                                ,(file-truename (expand-file-name "journal.org"
                                                                  me/org-home-dir)))
           "* %?\nEntered on %U\n  %i\n  %a")))
#+end_src

I write a lot of =emacs-lisp= via =org-mode=

#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+end_src

** =org-roam= experimentation

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory (file-truename (expand-file-name "roam"
                                                         me/org-home-dir)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ("C-c n t" . org-roam-tag-add)
           ("C-c n T" . org-roam-tag-remove)
           ("C-c n d" . org-roam-dailies-capture-today))
    :config
    (org-roam-db-autosync-mode))
#+end_src

* Languages

** Lisp(s)

*** Clojure

+ Java interop necessitates =subword-mode= for CamelCase navigation

#+begin_src emacs-lisp
  (use-package clojure-mode
    :ensure t
    :hook ((clojure-mode . paredit-mode)
           (clojure-mode . rainbow-delimiters-mode)
           (clojure-mode . subword-mode)))
#+end_src

Try to make =cider= look and feel like a regular clojure buffer.

#+begin_src emacs-lisp
  (use-package cider
    :ensure t
    :hook ((cider-repl-mode . eldoc-mode)
           (cider-repl-mode . paredit-mode)
           (cider-repl-mode . rainbow-delimiters-mode)))

  (use-package cider-repl
    :ensure nil
    :custom
    (cider-repl-pop-to-buffer-on-connect t))

  (use-package cider-repl-history
    :ensure nil
    :custom
    (cider-repl-history-file (expand-file-name "cider-history"
                                               no-littering-var-directory))
    (cider-repl-wrap-history t))

  (use-package cider-eval
    :ensure nil
    :custom
    (cider-auto-select-error-buffer t)
    (cider-show-error-buffer t))
#+end_src

**** =org-mode= based literate programming.

Along with an easy-template for literate clojure notebooks.

#+begin_src emacs-lisp
  (use-package ob-clojure
    :ensure nil
    :after (org)
    :custom
    (org-babel-clojure-backend 'cider)
    :config
    (me/org-babel-load-missing-lang 'clojure)
    (add-to-list 'org-structure-template-alist
                 '("clj" . "src clojure :results silent :tangle generated/tangled.clj")))
#+end_src

*** Common Lisp

Bind =C-x M-e= to run a lisp sexp from anywhere. Something like the CL
analogue of =C-x e=.

#+begin_src emacs-lisp
  (use-package slime
    :ensure t
    :bind ("C-x M-e" . slime-eval-last-expression)
    :config
    (setq slime-lisp-implementations
          '((sbcl ("sbcl") :coding-system utf-8-unix)))
    (setq slime-default-lisp 'sbcl))
#+end_src

Slime's own =M-s= binding conflicts with paredit's own
=paredit-splice-sexp= binding.

#+begin_src emacs-lisp
  (use-package slime-repl
    :ensure nil
    :after (slime)
    :config
    (unbind-key "M-s" slime-repl-mode-map))
#+end_src

Support =org-babel= for common lisp.

#+begin_src emacs-lisp
  (me/org-babel-load-missing-lang 'lisp)
#+end_src

*** Lisp-wide settings

Paredit is some good stuff. [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Animated cheat sheet]].

#+begin_src emacs-lisp
  (defvar me/lisp-mode-hooks
    '(emacs-lisp-mode-hook
      eval-expression-minibuffer-setup-hook
      ielm-mode-hook
      lisp-mode-hook
      lisp-interaction-mode-hook
      scheme-mode-hook
      slime-editing-mode-hook))
  
  (use-package paredit
    :ensure t
    :delight
    :config
    (dolist (mode-hook me/lisp-mode-hooks)
      (add-hook mode-hook #'paredit-mode)))
  
  (use-package rainbow-delimiters
    :ensure t
    :delight
    :config
    (dolist (mode-hook me/lisp-mode-hooks)
      (add-hook mode-hook #'rainbow-delimiters-mode)))
#+end_src

[[https://www.emacswiki.org/emacs/ElDoc][eldoc-mode]] shows documentation in minibuffer on the fly.

#+begin_src emacs-lisp
  (dolist (mode-hook me/lisp-mode-hooks)
    (add-hook mode-hook #'turn-on-eldoc-mode))
#+end_src
 
** Haskell

#+begin_src emacs-lisp
  (use-package haskell-mode
    :ensure t
    :bind (:map haskell-mode-map
                ("C-c C-l" . haskell-process-load-or-reload)
                ("C-`" . haskell-interactive-bring)
                ("C-c C-t" . haskell-process-do-type)
                ("C-c C-i" . haskell-process-do-info)))
  
  (use-package hindent
    :ensure t
    :hook haskell-mode)
#+end_src

** C-family general settings

#+begin_src emacs-lisp
  (use-package cmake-mode
    :ensure t)
#+end_src

#+begin_src emacs-lisp
  (use-package clang-format
    :ensure t
    :bind (:map c++-mode-map
           ("C-c TAB" . clang-format-buffer)
           :map c-mode-map
           ("C-c TAB" . clang-format-buffer))
    :config
    (setq clang-format-style "Google"))
#+end_src

** Rust

#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t
    :commands rust-format-buffer
    :bind (:map rust-mode-map
                ("C-c <tab>" . rust-format-buffer))
    :hook ((rust-mode . cargo-minor-mode)
           (rust-mode . subword-mode)))

  (use-package cargo
    :after rust-mode
    :ensure t)
#+end_src

** Golang

#+begin_src emacs-lisp
  (use-package go-mode
    :ensure t
    :commands gofmt
    :bind (:map go-mode-map
                ("C-c <tab>" . gofmt))
    :config
    (add-hook 'before-save-hook #'gofmt-before-save t))
#+end_src

** eglot

#+begin_src emacs-lisp
  (use-package eglot
    :hook ((rust-mode . eglot-ensure)))
#+end_src

* Version Control

#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :delight
    (magit-diff-mode "Magit Diff")
    (magit-log-mode "Magit Log")
    (magit-popup-mode "Magit Popup")
    (magit-status-mode "Magit Status"))
#+end_src

Enable autocommit for some custom org files.

#+begin_src emacs-lisp
  (use-package git-auto-commit-mode
    :ensure t
    :config
    (dolist (setting '((gac-automatically-add-new-files-p . t)
                       (gac-automatically-push-p . t)
                       (gac-default-message . (lambda (filename)
                                                (current-time-string)))
                       (gac-debounce-interval . 3600)))
      (add-to-list 'safe-local-variable-values setting)))
#+end_src

In order to enable this, insert the following snippet in a
=.dir-locals.el= inside the git repo of choice.

#+begin_src emacs-lisp :tangle no
  ((org-mode . ((gac-automatically-add-new-files-p . t)
                (gac-automatically-push-p . t)
                (gac-default-message . (lambda (filename)
                                         (current-time-string)))
                (gac-debounce-interval . 3600)  ; wait 1h between auto-commits
                (eval git-auto-commit-mode +1))))
#+end_src

* Encryption

EasyPG support for =.gpg= extension files.

#+begin_src emacs-lisp
  (use-package epa-file
    :config
    (epa-file-enable))
#+end_src

=org-crypt= for heading-specific encryption in =org-mode= buffers (not
necessarily with the =.gpg= extensions)

#+begin_src emacs-lisp
  (use-package org-crypt
    :ensure nil
    :after org
    :config
    (org-crypt-use-before-save-magic))
#+end_src


* Final Overrides

** Load =.custom.el=

Tell Emacs to add extra code in another file that would be then
loaded, if existing.

#+begin_src emacs-lisp
  (use-package cus-edit
    :custom
    (custom-file (expand-file-name "custom.el"
                                   no-littering-etc-directory))
    :config
    (when (file-exists-p custom-file)
      (load custom-file)))
#+end_src
